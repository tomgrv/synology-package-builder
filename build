#!/bin/sh

# Default DSM version and arch
#  ↓
DSM=7.0
ARCH=avoton
WORKSPACE=$(test -d /workspace && echo "/workspace" || echo "${TEMP:-/tmp}")
TOOLKIT=/toolkit

# Parse script arguments for dsm version and arch
#  ↓
while getopts ":v:p:" opt; do
    case $opt in
    v)
        DSM="$OPTARG"
        shift 2
        ;;
    p)
        ARCH="$OPTARG"
        shift 2
        ;;
    \?)
        echo "Invalid option -$OPTARG" >&2
        exit 1
        ;;
    esac
done

echo "::group::Building packages for DSM$DSM on $ARCH"

echo "Workspace: $WORKSPACE"
echo "DSM version: $DSM"
echo "Architecture: $ARCH"

# Prepare build environment
# https://help.synology.com/developer-guide/getting_started/prepare_environment.html
#  ↓
if [ ! -d "$TOOLKIT/pkgscripts-ng" ]; then
    git clone https://github.com/SynologyOpenSource/pkgscripts-ng $TOOLKIT/pkgscripts-ng
fi

# Set safe directory
#  ↓
git config --global --add safe.directory $TOOLKIT/pkgscripts-ng

# Deploy Chroot Environment For Different NAS Target
# https://help.synology.com/developer-guide/getting_started/prepare_environment.html
#  ↓
if [ ! -d "$TOOLKIT/build_env/ds.$ARCH-$DSM" ] || [ ! -x $TOOLKIT/build_env/ds.$ARCH-$DSM/PkgVersion ]; then
    mkdir -p $TOOLKIT/build_env
    cd $TOOLKIT/pkgscripts-ng/
    git checkout DSM$DSM || exit 1
    ./EnvDeploy --version $DSM -p $ARCH
fi

# For each project in subsequent arguments in the form of name:folder, create a symlink to the folder and build
# https://docs.github.com/en/actions/creating-actions/dockerfile-support-for-github-actions#workdir
#  ↓
while [ $# -gt 0 ]; do
    case "$1" in
    *:*)
        SOURCE=${1#*:}
        PACKAGE=${1%:*}
        ;;
    .*)
        SOURCE=$1
        PACKAGE=$(basename $1)
        ;;
    esac

    # Print package info
    echo "Package: $PACKAGE"

    # Create symlink to source folder
    mkdir -p $TOOLKIT/source

    if [ ! -d "$WORKSPACE/$SOURCE" ]; then
        echo "Source folder $WORKSPACE/$SOURCE does not exist"
        exit 1
    elif [ ! -d "$TOOLKIT/source/$PACKAGE" ]; then
        #echo "Linking $TOOLKIT/source/$PACKAGE/ to $WORKSPACE/$SOURCE"
        #ln -s "$WORKSPACE/$SOURCE" "$TOOLKIT/source/$PACKAGE" || exit 1
        echo "Copy $WORKSPACE/$SOURCE -> $TOOLKIT/source/$PACKAGE"
        cp -rp "$WORKSPACE/$SOURCE" "$TOOLKIT/source/$PACKAGE" || exit 1
    else
        echo "Link already exists for $PACKAGE"
    fi

    # Build package
    cd $TOOLKIT
    pkgscripts-ng/PkgCreate.py --print-log -x0 -p $ARCH -c -v $DSM $PACKAGE || exit 1

    # Next package
    shift
done

echo "::endgroup::"
